/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */

(function(){function aa(a, b, c){return a.call.apply(a.bind,arguments)}function ba(a, b, c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a, b, c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a, b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a, b, c, d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&("style"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a, b, c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}
    function w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function y(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
    function ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,"link",{rel:"stylesheet",href:b,media:"all"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error("Stylesheet failed to load");d()}):setTimeout(function(){e=!0;d()},0);u(a,"head",b)}
    function A(a,b,c,d){var e=a.c.getElementsByTagName("head")[0];if(e){var f=t(a,"script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||"-"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+" "+(a.f+"00")+" 300px "+I(a.c)}function I(a){var b=[];a=a.split(/,\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['"]/g,"");-1!=d.indexOf(" ")||/^\d/.test(d)?b.push("'"+d+"'"):b.push(d)}return b.join(",")}function J(a){return a.a+a.f}function H(a){var b="normal";"o"===a.a?b="oblique":"i"===a.a&&(b="italic");return b}
    function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F("-");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c("wf","loading")]);K(a,"loading")}function L(a){if(a.g){var b=y(a.f,a.a.c("wf","active")),c=[],d=[a.a.c("wf","loading")];b||c.push(a.a.c("wf","inactive"));w(a.f,c,d)}K(a,"inactive")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,"span",{"aria-hidden":"true"},this.f)}function N(a){u(a.c,"body",a.a)}function O(a){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+I(a.c)+";"+("font-style:"+H(a)+";font-weight:"+(a.f+"00")+";")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||"BESbswy";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+",serif",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+",sans-serif",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G("serif",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G("sans-serif",J(this.a));a=
        O(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:"serif",C:"sans-serif"},S=null;function T(){if(null===S){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f["sans-serif"]=this.m.a.offsetWidth;this.A=q();U(this)};
    function la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f["sans-serif"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c("wf",a.c,J(a).toString(),"active")],[b.a.c("wf",a.c,J(a).toString(),"loading"),b.a.c("wf",a.c,J(a).toString(),"inactive")]);K(b,"fontactive",a);this.m=!0;na(this)};
    W.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c("wf",a.c,J(a).toString(),"active")),d=[],e=[b.a.c("wf",a.c,J(a).toString(),"loading")];c||d.push(b.a.c("wf",a.c,J(a).toString(),"inactive"));w(b.f,d,e)}K(b,"fontinactive",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c("wf","active")],[a.a.c("wf","loading"),a.a.c("wf","inactive")]),K(a,"active")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};
    function qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c("wf",x.c,J(x).toString(),"loading")]);K(r,"fontloading",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);
        X=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}
    ra.prototype.load=function(a){function b(){if(f["__mti_fntLst"+d]){var c=f["__mti_fntLst"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||"https://fast.fonts.net/jsapi")+"/"+d+".js"+(e?"?v="+e:""),function(e){e?a([]):(f["__MonotypeConfiguration__"+
    d]=function(){return c.a},b())}).id="__MonotypeAPIScript__"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(":"),d[1])for(var h=d[1].split(","),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||""}var ua="https://fonts.googleapis.com/css";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(":");3==e.length&&a.f.push(e.pop());var f="";2==e.length&&""!=e[1]&&(f=":");a.a.push(e.join(f))}}
    function wa(a){if(0==a.a.length)throw Error("No fonts to load!");if(-1!=a.c.indexOf("kit="))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,"+"));b=a.c+"?family="+c.join("%7C");0<a.f.length&&(b+="&subset="+a.f.join(","));0<a.g.length&&(b+="&text="+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}
    var za={latin:"BESbswy","latin-ext":"\u00e7\u00f6\u00fc\u011f\u015f",cyrillic:"\u0439\u044f\u0416",greek:"\u03b1\u03b2\u03a3",khmer:"\u1780\u1781\u1782",Hanuman:"\u1780\u1781\u1782"},Aa={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Ba={i:"i",italic:"i",n:"n",normal:"n"},
        Ca=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
    function Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(":"),e=d[0].replace(/\+/g," "),f=["n4"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(","),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k="";else{k=n[2];k=null==k||""==k?"n":Ba[k];n=n[1];if(null==n||""==n)n="4";else var r=Aa[n],n=r?r:isNaN(n)?"4":n.substr(0,1);k=[k,n].join("")}}else k="";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(","):
        g,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||"https://use.typekit.net")+"/"+b+".js",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga("font-weight:"+h.weight+";font-style:"+h.style)))}a(d.a)},A(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+ea(this.c)+"/"+b+".js",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)};"function"===typeof define&&define.amd?define(function(){return Z}):"undefined"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());

!function(t,e){"use strict";"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.bnTextAutosize=e()}("object"==typeof global?global:this,function(){"use strict";var t={alignVert:!1,alignBottomVert:!1,alignHoriz:!1,multiLine:!1,detectMultiLine:!0,minFontSize:6,maxFontSize:80,reProcess:!0,widthOnly:!1,alignVertWithFlexbox:!1};return function(i,n){n||(n={});var l={};for(var o in t)n.hasOwnProperty(o)?l[o]=n[o]:l[o]=t[o];"function"==typeof i.toArray&&(i=i.toArray());var r=Object.prototype.toString.call(i);"[object Array]"!==r&&"[object NodeList]"!==r&&"[object HTMLCollection]"!==r&&(i=[i]);for(var a=0;a<i.length;a++)e(i[a],l)};function e(t,e){if(r=t,!("object"==typeof HTMLElement?r instanceof HTMLElement:r&&"object"==typeof r&&null!==r&&1===r.nodeType&&"string"==typeof r.nodeName)||!e.reProcess&&t.getAttribute("textFitted"))return!1;var r,a,s,c,g,p,x,m;e.reProcess||t.setAttribute("textFitted",1),c=t.innerHTML,g=n(t),s=i(t),g&&(e.widthOnly||s)||(g=n(t.parentElement),s=i(t.parentElement)),-1===c.indexOf("textFitted")?((a=document.createElement("span")).className="textFitted",a.style.display="inline-block",a.innerHTML=c,t.innerHTML="",t.appendChild(a)):(l(a=t.querySelector("span.textFitted"),"textFitAlignVert")&&(a.className=a.className.replace("textFitAlignVert",""),a.style.height="",t.className.replace("textFitAlignVertFlex","")),l(a,"textFitAlignBottomVert")&&(a.className=a.className.replace("textFitAlignBottomVert",""),a.style.height="",t.className.replace("textFitAlignBottomVertFlex",""))),e.alignHoriz&&(t.style["text-align"]="center",a.style["text-align"]="center");var d=e.multiLine;e.detectMultiLine&&!d&&a.scrollHeight>=2*parseInt(window.getComputedStyle(a)["font-size"],10)&&(d=!0),d||(t.style["white-space"]="nowrap"),p=e.minFontSize,m=e.maxFontSize;for(var y=p;p<=m;)x=m+p>>1,a.style.fontSize=x+"px",a.scrollWidth<=g&&(e.widthOnly||a.scrollHeight<=s)?(y=x,p=x+1):m=x-1;if(a.style.fontSize!=y+"px"&&(a.style.fontSize=y+"px"),e.alignVert){o();var u=a.scrollHeight;"static"===window.getComputedStyle(t).position&&(t.style.position="relative"),l(a,"textFitAlignVert")||(a.className=a.className+" textFitAlignVert"),a.style.height=u+"px",e.alignVertWithFlexbox&&!l(t,"textFitAlignVertFlex")&&(t.className=t.className+" textFitAlignVertFlex")}if(e.alignBottomVert){o();u=a.scrollHeight;"static"===window.getComputedStyle(t).position&&(t.style.position="relative"),l(a,"textFitAlignBottomVert")||(a.className=a.className+" textFitAlignBottomVert"),a.style.height=u+"px",e.alignVertWithFlexbox&&!l(t,"textFitAlignVertBottomFlex")&&(t.className=t.className+" textFitAlignVertBottomFlex")}}function i(t){var e=window.getComputedStyle(t,null);return t.clientHeight-parseInt(e.getPropertyValue("padding-top"),10)-parseInt(e.getPropertyValue("padding-bottom"),10)}function n(t){var e=window.getComputedStyle(t,null);return t.clientWidth-parseInt(e.getPropertyValue("padding-left"),10)-parseInt(e.getPropertyValue("padding-right"),10)}function l(t,e){return(" "+t.className+" ").indexOf(" "+e+" ")>-1}function o(){if(!document.getElementById("textFitStyleSheet")){var t=[".textFitAlignVert{","position: absolute;","top: 0; right: 0; bottom: 0; left: 0;","margin: auto;","display: flex;","justify-content: center;","flex-direction: column;","}",".textFitAlignBottomVert{","position: absolute;","right: 0; bottom: 0; left: 0;","margin: auto;","display: flex;","justify-content: center;","flex-direction: column;","}",".textFitAlignVertFlex{","display: flex;","}",".textFitAlignVertFlex .textFitAlignVert{","position: static;","}"].join(""),e=document.createElement("style");e.type="text/css",e.id="textFitStyleSheet",e.innerHTML=t,document.body.appendChild(e)}}});
function boffset(t,e,n,r,c,a,o){function u(t){switch(t){case"left":return Math.round(-20-s().right);case"right":return Math.round(20-s().left);case"top":return Math.round(-20-s().bottom);case"bottom":return Math.round(20-s().top)}}function s(){var t,u=new y(0,0),s=new y(e,0),x=new y(e,n),i=new y(0,n),h=new y(w((t=o.split(" "))[1]),w(t[0]));function y(t,e){this.x=t,this.y=e}function f(t,e,n,r){return r=r*Math.PI/180,new y(Math.cos(r)*(t.x-e)-Math.sin(r)*(t.y-n)+e,Math.sin(r)*(t.x-e)+Math.cos(r)*(t.y-n)+n)}function w(t){switch(t){case"left":case"top":return 0;case"right":case"bottom":return 100;case"center":return 50}}var M,m,l,p,b,g,d,v=(M=e,m=n,l=h.x,p=h.y,[new y(-(g=(M*(b=a)-M)*l/100),-(d=(m*b-m)*p/100)),new y(M*b-g,-d),new y(M*b-g,m*b-d),new y(-g,m*b-d)]);function I(t,e){return new y(t.x>e.x?e.x+(t.x-e.x)/2:t.x+(e.x-t.x)/2,t.y>e.y?e.y+(t.y-e.y)/2:t.y+(e.y-t.y)/2)}s=v[1],x=v[2],i=v[3],u=f(u=v[0],0,0,r),s=f(s,0,0,r),x=f(x,0,0,r),i=f(i,0,0,r);var P=function(){switch(o){case"top left":return u;case"top right":return s;case"bottom right":return x;case"bottom left":return i;case"top center":return I(s,u);case"center right":return I(x,s);case"bottom center":return I(x,i);case"center left":return I(i,u);case"center center":return I(x,u)}}();return u=f(u,P.x,P.y,c),s=f(s,P.x,P.y,c),x=f(x,P.x,P.y,c),i=f(i,P.x,P.y,c),{left:Math.min(u.x,s.x,x.x,i.x),top:Math.min(u.y,s.y,x.y,i.y),right:Math.max(u.x,s.x,x.x,i.x),bottom:Math.max(u.y,s.y,x.y,i.y)}}return{x:u((x=t.split(" "))[1]||x[0]),y:u(x[0])};var x}
/* sendBeacon polyfill */
function sendBeacon(e,t){var n=this.event&&this.event.type,i="unload"===n||"beforeunload"===n,s="XMLHttpRequest"in this?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");s.open("POST",e,!i),s.withCredentials=!0,s.setRequestHeader("Accept","*/*"),"string"==typeof t?(s.setRequestHeader("Content-Type","text/plain;charset=UTF-8"),s.responseType="text/plain"):t instanceof Blob&&t.type&&s.setRequestHeader("Content-Type",t.type);try{s.send(t)}catch(e){return!1}return!0}!function(){"navigator"in this&&"sendBeacon"in this.navigator||("navigator"in this||(this.navigator={}),this.navigator.sendBeacon=sendBeacon.bind(this))}();

var _scene, customCode, timeline, itemLinks = !1,
    resourceCount = 0, staticAssetsLoaded,
    widgets = [],
    feedData, feedIntrvl, feedLoop = 0, feedImageCache = {},
    itemIdsToHyperlinkHandlers = {};

if (typeof console === 'undefined') {
    console = { log: function (msg) { } };
}
window.bnAnimation = {
    config: {},
    events: {},
    feed: {}
};

// forEach pollyfil
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function (callback, thisArg) {
        if (this === null) {
            throw new TypeError(' this is null or not defined');
        }
        if (typeof callback !== 'function') {
            throw new TypeError(callback + ' is not a function');
        }

        var T, k;
        var O = Object(this);
        var len = O.length >>> 0;

        if (arguments.length > 1) {
            T = thisArg;
        }
        k = 0;
        while (k < len) {
            var kValue;
            if (k in O) {
                kValue = O[k];
                callback.call(T, kValue, k, O);
            }
            k++;
        }
    };
}

config.forEach(function (item) {
    if (item.type === 'scene') {
        _scene = item;
        return;
    } else if (item.type === 'button' || item.type === 'text') {
        item.value = decodeEscapedText(item.value);
    }
    if (item.default_hyperlinkValue && item.default_interactionGroup) { itemLinks = true; }
});


var timelineStartLabel = 'start',
    loop = false, loop_count = -1, stop_second = -1,
    total_duration = 0,
    pauseOnMouseOver = false,
    feed = typeof _scene.feedUrl === 'string' && _scene.feedUrl !== '',
    bnTagParams = getBnTagParam() || {},
    isBnPeak = String(bnTagParams.bannernow_peek) === '1',
    timeline_stopped = false;
var bannerId = 'bn_main_canvas',
    $banner = document.getElementById(bannerId), // banner container
    $bannerContainer = $banner.parentNode; // outter container
var images = [], videos = [],
    imgCount = 0, vidCount = 0, wgtCount = 0, txtCount = 0;

setupGlobalHyperlink();

function isIE() {
    var myNav = navigator.userAgent.toLowerCase();
    return (myNav.indexOf('msie') != -1) ? pi(myNav.split('msie')[1]) : false;
}

function pf(pv) {
    return parseFloat(pv);
}
function pi(pv) {
    return parseInt(pv);
}

function addEventHandler(element, eventName, handler) {
    if (element.addEventListener) {
        element.addEventListener(eventName, handler, false);
    } else if (element.attachEvent) {
        element.attachEvent('on' + eventName, handler);
    } else {
        element['on' + eventName] = handler;
    }
}

function removeEventHandler(elem, eventType, handler) {
    if (elem && elem.removeEventListener) {
        elem.removeEventListener(eventType, handler, false);
    } else if (elem && elem.detachEvent) {
        elem.detachEvent('on' + eventType, handler);
    }
}

function decodeEscapedText(encodedValue) {
    return String(encodedValue)
        .replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&#x2F;/g, '/');
}

function loadXhr(url, callback) {
    var xmlhttp = new XMLHttpRequest();

    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState === XMLHttpRequest.DONE) {
            if (xmlhttp.status === 200) {
                callback(xmlhttp.responseText);
            }
            else if (xmlhttp.status == 400) {
                callback();
            }
            else {
                callback();
            }
        }
    };

    xmlhttp.open('GET', url, true);
    xmlhttp.send();
}

function loadFeed(done) {
    loadXhr(_scene.feedUrl, function (data) {
        if (typeof data !== 'undefined' && data !== null) {
            feedData = JSON.parse(data);
            feedLoop = -1;
            var fInterval = pi(feedData.update_interval) * 1000;
            clearInterval(feedIntrvl);
            feedIntrvl = window.setInterval(function () {
                loadFeed();
            }, fInterval);
            var prodIds = (decodeURIComponent(bnTagParams['productId'] || '')).split(',').reverse();
            feedData.feed.sort(function(a, b){return prodIds.indexOf(b['productId']) - prodIds.indexOf(a['productId']); });
            window.bnAnimation.feed.data = feedData;
            if (typeof window.bnAnimation.events.onFeedLoaded === 'function') {
                try {
                    window.bnAnimation.events.onFeedLoaded(feedData);
                } catch (err) { console.log('Unable to run custom code for onFeedLoaded'); }
            }
            feedReceivedNotifyAllWidgets(feedData);
        }
        if (typeof done === 'function') {
            done();
        }
    });
}

function notifyFeedReceived(domId, feedData) {
    var data = {
        cmd: 'feedLoaded',
        feed: feedData
    };
    notifyWidget(domId, data);
}

function feedReceivedNotifyAllWidgets(feedData) {
    widgets.forEach(function (i) {
        if (i.loaded) {
            notifyFeedReceived(i.item.id, feedData);
        }
    });
}

function notifyWidget(domId, data) {
    var f = document.getElementById(domId).children[0];
    f.contentWindow.postMessage(JSON.stringify(data), '*');
}

function handleMessageFromWidget(e) {
    var data = {};
    try {
        data = JSON.parse(e.data);
    } catch (e) { /*ignore*/ }

    if (typeof data.cmd === 'string') {
        switch (data.cmd) {
            case 'widgetInitComplete':
                handleWidgetInitComplete(data);
                break;
            case 'widgetSetText':
                handleSetTextFromWidget(data);
                break;
            case 'widgetSetGlobalUrl':
                _scene.global_interactionGroup = true;
                _scene.global_hyperlinkValue = data.url;
                _scene.global_hyperlinkTarget = data.target;
                setupGlobalHyperlink();
                break;
            case 'widgetIgnoreGlobalUrl':
                var $widget = document.getElementById(data.id);
                config.forEach(function (i) {
                    if (i.id === data.id) {
                        i.ignore_hyperlink = true;
                    }
                });
                $widget.parentNode.style.pointerEvents = (data.value) ? 'auto' : 'none';
                break;
        }
    }
}

function widgetLoaded(widget) {

    var l = (_scene || {}).locale ||
        getMeta('banner.translation.language.code') ||
        'en';

    var data = {
        cmd: 'initWidget',
        cfg: widget.controls,
        id: widget.id,
        loc: l,
        globalCfg: config,
        scrMode: isBnPeak
    };

    notifyWidget(widget.id, data);

    widgets.forEach(function (w) {
        if (w.item.id === widget.id) {
            w.loaded = true;
            return false;
        }
    });

    if (typeof feedData !== 'undefined' && feedData !== null) {
        notifyFeedReceived(widget.id, feedData);
    }
}

function widgetTransitionStart(widget) {
    var data = {
        cmd: 'startAnimation',
        id: widget.id
    };
    notifyWidget(widget.id, data);
}

function widgetTransitionComplete(widget) {
    var data = {
        cmd: 'stopAnimation',
        id: widget.id
    };
    notifyWidget(widget.id, data);
}

function handleWidgetInitComplete(data) {
    var conf = data.opts;

    if (conf) {
        if (conf.pre_ad_duration == 0) {
            pre_ad_widget = null;
            resourceLoaded();
            return;
        }

        pre_ad_loop = conf.loop;
        pre_ad_duration = pf(conf.duration);
        pre_ad_disappear_duration = pf(conf.disappear_duration);
    }
    resourceLoaded();
}

function handleSetTextFromWidget(data) {
    var $parent = document.getElementById(data.id),
        model = {};

    config.forEach(function (i) {
        if (i.id === data.id) {
            model = i;
            model.value = data.text;
        }
    });

    insertTextApplyAutosize(_scene, model, $parent, $parent.children[0]);
}

function resourceLoaded() {
    if (--resourceCount <= 0) {
        if (!staticAssetsLoaded) {
            onWindowResize();
            staticAssetsLoaded = true;
            // running custom code
            if (typeof window.bnAnimation.events.onBannerLoaded === 'function') {
                try {
                    window.bnAnimation.events.onBannerLoaded();
                } catch (e) { /* ignore */ }
            }

            // required for GIF generation
            console.log('Assets loading completed'); // DO NOT REMOVE
            if (window.peekCallback != null) {
                window.peekCallback(null, window.peek_obj());
            }
        }
    }
}

var pre_ad_widget = null;
var pre_ad_loop = false;
var pre_ad_duration = 3;
var pre_ad_disappear_duration = 0.5;

function getMeta(meta_name) {
    return (document.head.querySelector('[name="' + meta_name + '"]') || {}).content;
}

// if (isIE() == 9 || isIE() == 10) {
//show fallback, temporary disable
// var el = document.getElementById('fallback');
// if (typeof (el) == 'undefined' || el == null) {
//     var fb = new Image(1, 1);
//     fb.style.zIndex = 9999;
//     fb.style.position = 'fixed';
//     fb.style.width = banner.width + 'px';
//     fb.style.height = banner.height + 'px';
//     fb.src = getMeta('banner.thumbnail');
//     document.body.appendChild(fb);
// }
//}
// else {
addEventHandler(window, 'load', init);
// }

addEventHandler(window, 'unload', handleBannerUnload);
addEventHandler(window, 'beforeunload', handleBannerUnload);
addEventHandler(window, 'message', handleMessageFromWidget);


function init() {
    disableContextMenu();

    var fonts = {
        custom: {
            families: _scene.customFonts,
            urls: _scene.customFontUrls
        },
        regular: {
            families: _scene.googleFonts
        }
    };
    if (isBnPeak) {
        fonts.regular.families = fonts.regular.families.map(function (v) { return v + ':arabic,bengali,cyrillic,cyrillic-ext,devanagari,greek,greek-ext,gujarati,gurmukhi,hebrew,japanese,kannada,khmer,korean,latin-ext,malayalam,myanmar,oriya,sinhala,tamil,telugu,thai,vietnamese'; });
    }
    var initialItemValues = [];

    config.forEach(function (i) {
        if (i.type !== 'scene') {
            var temp_trans = i.transitions;
            var i_dur = pf(temp_trans[0].delay) + pf(temp_trans[0].duration) + pf(temp_trans[1].duration) + pf(temp_trans[2].duration);
            total_duration = (total_duration < i_dur) ? i_dur : total_duration;
        }
        if (i.type === 'image') {
            images.push(i);
            ++resourceCount;
            ++imgCount;
            initialItemValues.push({ id: i.id, value: i.imageSrc, type: 'image' });
        } else if (i.type === 'widget') {
            widgets.push({ item: i, loaded: false });
            ++resourceCount;
            ++wgtCount;
        } else if (i.type === 'text' || i.type === 'button') {
            ++txtCount;
            initialItemValues.push({ id: i.id, value: i.value, type: 'text' });
        } else if (i.type === 'video') {
            videos.push(i);
            if (isBnPeak) {
                ++resourceCount;
                ++vidCount;
            }
            initialItemValues.push({ id: i.id, value: i.sources, type: 'video' });
        }
    });

    if (feed) {
        ++resourceCount;
        loadFeed(function () {
            resourceLoaded();
            var imageLoadedFn = function () { resourceLoaded(); };

            for (var i = 0; i < imgCount; ++i) {
                if (images[i].feedTag) {
                    if (feedData.feed && feedData.feed.length) {
                        loadImage(getOptimizedImageUrl(images[i],feedData.feed[0][images[i].feedTag]), imageLoadedFn, imageLoadedFn);
                    } else {
                        resourceLoaded();
                    }
                }
            }
        });
    }

    if (txtCount > 0) {
        ++resourceCount;

        var fontLoaderConfig = {
            custom: fonts.custom,
            timeout: 60000,
            active: function () {
                resourceLoaded();
            },
            inactive: function () {
                resourceLoaded();
            }
        };

        if (fonts.regular.families.length > 0) {
            fontLoaderConfig.google = fonts.regular;
        }

        WebFont.load(fontLoaderConfig);
    }

    if (resourceCount > 0) {
        var imageLoadedFn = function () { resourceLoaded(); };

        for (var i = 0; i < imgCount; ++i) {
            if (!feed || !images[i].feedTag) {
                loadImage(getOptimizedImageUrl(images[i]), imageLoadedFn, imageLoadedFn);
            }
        }
        if (isBnPeak) {
            // preload video thumbnails
            for (var i = 0; i < vidCount; ++i) {
                loadImage(videos[i]['videoFallback'], imageLoadedFn, imageLoadedFn);
            }
        }

        for (var i = 0; i < wgtCount; ++i) {
            createWidgetIframe(widgets[i].item);
        }
    } else {
        resourceLoaded();
    }
}

var rollover = 0, videotime = 0, bannerStartTime,
    videomap = {}, totalvideotime = 0,
    unloaded;

function handleBannerUnload() {
    if (unloaded) {
        return;
    }
    unloaded = true;

    var duration_msec = timeline?timeline.duration() * 1000:30000;
    duration_msec = (pre_ad_widget) ? (duration_msec + pre_ad_duration * 1000) : duration_msec;

    var bannerVisibilyTime = (new Date() - bannerStartTime) / duration_msec * 100,
        isVideoData, url = window.stats_analytics_url || '';

    var timeConverter = function(t) {
        if (t > 0 && t <= 15) {
            return 1;
        } else if (t <= 40) {
            return 25;
        } else if (t <= 60) {
            return 50;
        } else if (t <= 85) {
            return 75;
        }
        return 100;
    };

    bannerVisibilyTime = timeConverter(bannerVisibilyTime);

    for (var v in videomap) {
        if (!videomap.hasOwnProperty(v)) continue;
        isVideoData = 1;
        videotime += videomap[v].t;
    }

    if (!isBnPeak && navigator.sendBeacon) {
        if (!url && window.click_analytics_url) {
            url = click_analytics_url.replace('redirect', 'stats');
        }
        if (!url) { return; }

        url += '&visibility_time=' + bannerVisibilyTime +
            '&rollover=' + rollover;

        if (isVideoData) {
            url += '&video_duration=' + timeConverter(videotime / totalvideotime * 100);
        }

        navigator.sendBeacon(url);
    }
}

function onVideoTimeUpdate(e) {
    if (!videomap[e.target.currentSrc]) {
        videomap[e.target.currentSrc] = {
            t: 0
        };
        totalvideotime += e.target.duration;
    }
    var rec = videomap[e.target.currentSrc];

    if (e.target.currentTime > rec.t) {
        rec.t = e.target.currentTime;
    }
}

function onBannerHover() {
    rollover = 1;
}

function loadImage(src, success, fail) {
    var img = new Image();
    img.onload = success;
    img.onerror = fail;
    img.src = src;
}

function createWidgetIframe(widgetObject) {
    var parent = document.getElementById(widgetObject.id),
        iframe = document.createElement('iframe');

    iframe.onload = function () { widgetLoaded(widgetObject); };
    iframe.src = widgetObject.src;
    iframe.style.width = widgetObject.width+'px';
    iframe.style.height = widgetObject.height+'px';
    iframe.style.border = 'none';
    iframe.allowTransparency = true;
    iframe.frameborder = 0;
    iframe.setAttribute('frameborder', 0);
    iframe.scrolling = 'no';
    iframe.setAttribute('scrolling', 'no');
    parent.style.visibility = 'hidden';
    parent.appendChild(iframe);
}

function removePlaceholder() {
    if (_scene.fallback || _scene.fallback_png || _scene.mp4) {
        var thingToRemove = document.getElementById('fallback');
        thingToRemove.parentNode.removeChild(thingToRemove);
    }
}

function stopLoader() {
    document.getElementById('bnloader').style.display = 'none';
}

function disableContextMenu() {
    document.getElementById(bannerId).oncontextmenu = function (event) {
        return false;
    };
}

function populateStageConfig(stage) {
    var c = window.bnAnimation.config;

    c.hasBorder = function () { return stage.border; };
    c.getBorderColor = function () { return stage.borderColor; };
    c.hasLoop = function () { return stage.loop; };
    c.getLoopType = function () { return stage.loopType; };
    c.getLoopCount = function () { return stage.loopCount; };
    c.getLoopStopSecond = function () { return stage.stopSecond; };
    c.hasPause = function () { return stage.pause; };
    c.hasGlobalClick = function () { return stage.global_interactionGroup; };
    c.getGlobalClickUrl = function () { return stage.global_hyperlinkValue; };
    c.getLocale = function () { return stage.locale; };
    c.getWidth = function () { return pi(stage.width); };
    c.getHeight = function () { return pi(stage.height); };
}

function startAnimation() {
    if (typeof TimelineLite === 'undefined') {
        console.log('TimelineLite is not defined');
        return;
    }
    stopLoader();

    timeline = new TimelineLite();

    timeline.eventCallback("onUpdate", function (e) {
        if (loop_count === 0) {
            if (stop_second >= 0 && timeline.time() >= stop_second) {
                // count with stop, stop_second>0
                timeline.seek(stop_second);
                timeline.stop();
                timeline_stopped = true;
            } else if (stop_second === -1 && timeline.progress() >= 0.99) {
                // count with stop or count, stop_second == -1 (-1 end of banner)
                timeline.progress(0.99);
                timeline.stop();
                timeline_stopped = true;
            }
        }
    });
    timeline.add(timelineStartLabel);
    window.bnAnimation.timeline = timeline;
    window.bnAnimation.gotoAndPlay = function (s) {
        if (pre_ad_widget) {
            TweenLite.killTweensOf(pre_ad_widget);
            if (s < pre_ad_duration) {
                pre_ad_widget.parentNode.style.display = 'block';
                pre_ad_widget.style.opacity = 1;
                window.bnAnimation.timeline.seek(0);
                window.bnAnimation.timeline.pause();
                TweenLite.to(pre_ad_widget, pre_ad_disappear_duration, {
                    opacity: 0, delay: pre_ad_duration - pre_ad_disappear_duration - s,
                    onComplete: hideLegalFrame, onCompleteParams: ['resume']
                });
                return;
            }

            pre_ad_widget.parentNode.style.display = 'none';
            pre_ad_widget.style.opacity = 0;
            window.bnAnimation.timeline.seek(s - pre_ad_duration);
            return;
        }
        window.bnAnimation.timeline.seek(s);
    };

    window.bnAnimation.gotoAndStop = function (s) {
        window.bnAnimation.timeline.pause();
        if (pre_ad_widget) {
            TweenLite.killTweensOf(pre_ad_widget);
            if (s < pre_ad_duration) {
                pre_ad_widget.parentNode.style.display = 'block';
                pre_ad_widget.style.opacity = 1;
                return;
            }

            pre_ad_widget.parentNode.style.display = 'none';
            pre_ad_widget.style.opacity = 0;
            window.bnAnimation.timeline.seek(s - pre_ad_duration);
            return;
        }

        window.bnAnimation.timeline.seek(s);
    };

    config.forEach(function (item) {
        switch (item.type) {
            case 'scene':
                _setupScene(item, $banner);
                populateStageConfig(item);
                break;
            case 'image':
            case 'text':
            case 'button':
            case 'rect':
            case 'video':
            case 'widget':
                _setupItem(item, $banner, timeline);
                break;
        }
    });

    if (feed) {
        feedLoop = 0;
        refreshItemsFromFeed();
    }

    if (loop === true) {
        timeline.call(function () {
            if (feed) {
                ++feedLoop;
                refreshItemsFromFeed();
            }

            if (loop_count > 0) {
                --loop_count;
            }

            if (!!pre_ad_widget && pre_ad_loop) {
                pre_ad_widget.parentNode.style.display = 'block';
                pre_ad_widget.style.visibility = '';
                pre_ad_widget.style.opacity = 1;
                TweenLite.to(pre_ad_widget, pre_ad_disappear_duration, { opacity: 0, delay: (pre_ad_duration - pre_ad_disappear_duration), onComplete: hideLegalFrame, onCompleteParams: ['restart'] });
            } else {
                timeline.restart();
            }

            // running custom code
            if (typeof window.bnAnimation.events.onBannerNextLoop === 'function') {
                try {
                    window.bnAnimation.events.onBannerNextLoop();
                } catch (e) { console.log('Unable to run customCode for onBannerNextLoop'); }
            }
        });
    }

    if (pauseOnMouseOver === true) {
        addEventHandler($banner, 'mouseover', function (e) {
            e.preventDefault();
            timeline.pause();

            // running custom code
            if (typeof window.bnAnimation.events.onBannerPaused === 'function') {
                try {
                    window.bnAnimation.events.onBannerPaused();
                } catch (e) { console.log('Unable to run customCode for onBannerPaused'); }
            }
        });
        addEventHandler($banner, 'mouseout', function (e) {
            e.preventDefault();
            if (!timeline_stopped) {
                timeline.resume();
                if (typeof window.bnAnimation.events.onBannerRestarted === 'function') {
                    try {
                        window.bnAnimation.events.onBannerRestarted();
                    } catch (e) { console.log('Unable to run customCode for onBannerRestarted'); }
                }
            }
        });
    }

    if (customCode) {
        customCode = customCode
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'")
            .replace(/&#x2F;&#x2F;/g, "//")
            .replace(/&amp;/g, '&')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&#x2F;/g, "/");

        // run custom code
        try {
            (new Function(customCode))();
        } catch (e) {
            console.log('There is a problem running custom code. Please review your code!');
        }
    }

    if (pre_ad_widget) {
        window.bnAnimation.timeline.pause();
        pre_ad_widget.parentNode.style.display = 'block';
        pre_ad_widget.style.opacity = '1';
        TweenLite.to(pre_ad_widget, pre_ad_disappear_duration, {
            opacity: 0, delay: (pre_ad_duration - pre_ad_disappear_duration),
            onComplete: hideLegalFrame, onCompleteParams: ['resume']
        });
    }
}

function hideLegalFrame(action) {
    pre_ad_widget.parentNode.style.display = 'none';
    if (action === 'resume') {
        window.bnAnimation.timeline.resume();
    } else if (action === 'restart') {
        window.bnAnimation.timeline.restart();
    }
}

function onWindowResize() {
    $banner.style.width = _scene.width + 'px';
    $banner.style.height = _scene.height + 'px';
    $bannerContainer.style.width = _scene.width + 'px';
    $bannerContainer.style.height = _scene.height + 'px';
    bannerStartTime = new Date();

    removePlaceholder();
    startAnimation();
}

function _setupScene(item, $banner) {
    if (item.border === true) {
        var _style = $banner.style;
        if (item.responsive) {
            _style = $banner.parentNode.style;
        }
        _style.border = item.borderColor + ' 1px solid';
        _style.setProperty('-webkit-box-sizing', 'border-box');
        _style.setProperty('-moz-box-sizing', 'border-box');
        _style.setProperty('box-sizing', 'border-box');
    }

    if (item.loop === true) {
        loop = true;
        if (item.loopType === 'infinite') {
            loop_count = -1;
        } else if (item.loopType === 'count') {
            loop_count = item.loopCount - 1;
        } else {
            loop_count = item.loopCount;
            stop_second = item.stopSecond;
        }
    }
    if (item.pause === true) {
        pauseOnMouseOver = true;
    }
    if (item.customCodeGroup && typeof item.customCode === 'string' && item.customCode.trim() !== '') {
        customCode = item.customCode.trim();
    }

    document.onselectstart = function () { return false; };
    document.onmousedown = function () { return false; };
    addEventHandler(window, 'mouseover', onBannerHover);
}

function setupGlobalHyperlink() {
    if (_scene.global_interactionGroup || (!itemLinks && bnTagParams.bnTag) || (window.clickTag !== '')) {
        var goToAddress = _scene.global_hyperlinkValue || '';
        resetItemHyperlink(document.body, _scene, goToAddress, _scene.global_hyperlinkTarget);
    }
}

function _setupItem(item, $banner, timeline) {
    var $item = document.getElementById(item.id),
        $parent = $item.parentNode;

    if (item.visibilityMode === 'html' && isBnPeak) {
        $item.style.display = 'none';
        return;
    }
    if (item.visibilityMode === 'fallback' && !isBnPeak) {
        $item.style.display = 'none';
        return;
    }

    // making each item visible
    $item.style.display = '';
    if (item.type === 'widget' && item.pre_ad === true) {
        $item.style.width = '100%';
        $item.style.height = '100%';
        $item.firstElementChild.style.width = _scene.width + 'px'
        $item.firstElementChild.style.height = _scene.height + 'px'
        $item.style.visibility = '';
        $parent.style.width = '100%';
        $parent.style.height = '100%';
        $parent.style.position = 'absolute';
        if (item.zIndex) {
            $parent.style.zIndex = item.zIndex;
        }
        pre_ad_widget = $item;
        return;
    } else {
        //set visibility hidden to all items
        $parent.style.visibility = 'hidden';
        //TweenLite.set($parent, { visibility: 'hidden', immediateRender:true });
    }


    _setOnDefaultState($banner, $item, item, $parent);

    if (item.transitions) {
        var offset = pf(item.transitions[0].delay);
        var i_dur = offset + pf(item.transitions[0].duration) + pf(item.transitions[1].duration) + pf(item.transitions[2].duration);

        item.transitions.forEach(function (tweenConfig, ind) {
            var eff = {};
            var childEff = {scale: 1, transformOrigin: 'center center'};
            var dir = 'to';
            var tr_type = ['appear', 'stay', 'disappear'][ind];

            var origItemProps = {
                ease: 'Linear.easeNone',
                opacity: 1,
                x: pi(item.left),
                y: pi(item.top),
                transformOrigin: 'top left'
            };

            var origChildProps = {
                scale: 1,
                transformOrigin: 'center center'
            };

            var eff = {
                ease: 'Linear.easeNone',
                opacity: 1,
                x: pi(item.left),
                y: pi(item.top),
                transformOrigin: 'top left'
            };

            switch (tweenConfig.effect) {
                case 'none':
                    //no effect
                    break;
                case 'custom':
                    if (tweenConfig.custom.stay === true) {
                        dir = tweenConfig.custom.stayEffectType;
                    } else {
                        _setUpCustomEffect(timeline, item, tweenConfig.custom, timelineStartLabel + '+=' + offset);
                    }
                    break;
                case 'fadeIn':
                case 'fadeOut':
                    dir = 'fade';
                    eff.opacity = 0;
                    break;
                case 'scaleIn':
                case 'scaleOut':
                    dir = 'scale';
                    childEff.scale = 0;
                    break;
                case 'leftIn':
                case 'leftOut':
                    eff.x = boffset('top left', item.width, item.height, item.rotation, 0, 1, 'top left').x;
                    break;
                case 'rightIn':
                case 'rightOut':
                    eff.x = pi(_scene.width) + boffset('top right', item.width, item.height, item.rotation, 0, 1, 'top left').x;
                    break;
                case 'upIn':
                case 'upOut':
                    eff.y = boffset('top left', item.width, item.height, item.rotation, 0, 1, 'top left').y;
                    break;
                case 'downIn':
                case 'downOut':
                    eff.y = pi(_scene.height) + boffset('bottom left', item.width, item.height, item.rotation, 0, 1, 'top left').y;
                    break;
                // Stop Effects follow:
                default:
                    dir = tweenConfig.effect;
                    break;
            }

            if (item.type === 'widget') {
                if (tr_type === 'appear') {
                    origItemProps.onStart = widgetTransitionStart;
                    origItemProps.onStartParams = [item];
                }
                if (tr_type === 'disappear') {
                    eff.onComplete = widgetTransitionComplete;
                    eff.onCompleteParams = [item];
                }
            }

            if (item.type === 'video') {
                if (tr_type === 'appear') {
                    origItemProps.onStart = videoOnStart;
                    origItemProps.onStartParams = [item];
                }
                if (tr_type === 'disappear') {
                    eff.onComplete = videoOnComplete;
                    eff.onCompleteParams = [item];
                }
            }

            var tempObj = { immediateRender: true };

            if (tr_type === 'appear') {
                tempObj.visibility = 'visible';
                tempObj.immediateRender = false;
                timeline.set($parent, tempObj, timelineStartLabel + '+=' + offset);
            }

            if (tr_type === 'disappear' && !(loop === false && tweenConfig.effect === 'none' && total_duration === i_dur)) {
                tempObj.immediateRender = false;
                tempObj.visibility = 'hidden';
                timeline.set($parent, tempObj, timelineStartLabel + '+=' + (offset + pf(tweenConfig.duration)));
            }

            if (tr_type === 'appear' && tweenConfig.effect != 'custom') {
                // Appear effects
                timeline.fromTo($parent, pf(tweenConfig.duration), eff, origItemProps, timelineStartLabel + '+=' + offset);
                timeline.fromTo($item, pf(tweenConfig.duration), childEff, origChildProps, timelineStartLabel + '+=' + offset);
            } else if (tr_type === 'disappear' && tweenConfig.effect != 'custom') {
                // Disappear effects
                childEff.immediateRender = false;
                eff.immediateRender = false;
                timeline.fromTo($parent, pf(tweenConfig.duration), origItemProps, eff, timelineStartLabel + '+=' + offset);
                timeline.fromTo($item, pf(tweenConfig.duration), origChildProps, childEff, timelineStartLabel + '+=' + offset);
            } else if (dir === 'bounce' || dir === 'tada' || dir === 'shake' || dir === 'flash' || dir === 'swing' || dir === 'rotate360' || dir === 'wobble' || dir === 'rubberBand' || dir === 'pulse') {
                custom_stay_effect(timeline, $parent, tweenConfig, offset, dir, item);
            }
            offset += pf(tweenConfig.duration);
        });
    }
}

function videoOnStart(item) {
    if (isBnPeak) { return; }
    var $item = document.getElementById(item.id),
        $video = $item.children[0];

    if (item.video_autoplay) {
        $video.play();
    }
    else {
        $video.pause();
        $video.currentTime = 0;
    }
}

function videoOnComplete(item) {
    if (isBnPeak) { return; }
    var $item = document.getElementById(item.id),
        $video = $item.children[0];

    if (item.video_restart) {
        $video.pause();
        $video.currentTime = 0;
    }
}

function custom_stay_effect(tm, $p, c, ofs, effect, item) {
    var effects = (c.custom == null) ? { loopDuration: 1, repeat: -1, loopDelay: 1 } : c.custom;
    var $item = document.getElementById(item.id),
        shiftScaleXFraction,
        shiftScaleYFraction,
        shiftScaleDown,
        shiftScaleUp,
        shiftRotation,
        shiftVertical,
        shiftHorizontal,
        halfShiftVertical,
        halfShiftHorizontal,
        shiftHorizontalFraction,
        shiftVerticalFraction,
        shiftOpacity,
        upDuration,
        downDuration,
        direction,
        shiftRotationFraction,
        effectEasing,
        effectOrigin,
        loopDuration = (pf(c.duration) < pf(effects.loopDuration)) ? pf(c.duration) : pf(effects.loopDuration),
        loopDelay = pf(effects.loopDelay),
        repeat = (pi((pf(c.duration) + loopDelay) / (loopDuration + loopDelay)) == 0) ? 1 : pi((pf(c.duration) + loopDelay) / (loopDuration + loopDelay));

    if (pi(effects.repeat) > 0 && pi(effects.repeat) < repeat) {
        repeat = pi(effects.repeat);
    }
    var _shift = 0,
        offset = ofs,
        t,
        index;

    switch (effect) {
        case 'pulse':
            upDuration = loopDuration * ((effects.upDownRatio == null) ? 50 : pf(effects.upDownRatio)) / 100;
            downDuration = loopDuration - upDuration;
            shiftScaleXFraction = ((effects.shiftScaleX == null) ? 15 : pf(effects.shiftScaleX)) / 100;
            shiftScaleYFraction = ((effects.shiftScaleY == null) ? 15 : pf(effects.shiftScaleY)) / 100;
            effectEasing = (effects.easing || 'Sine.easeInOut');
            effectOrigin = (effects.origin || 'center center');

            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, upDuration, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, upDuration, { scaleX: (1 + shiftScaleXFraction), scaleY: (1 + shiftScaleYFraction), transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += upDuration;
                tm.to($p, downDuration, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, downDuration, { scaleX: 1, scaleY: 1, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                offset += loopDuration + loopDelay;
            }
            break;
        case 'rubberBand':
            shiftScaleXFraction = ((effects.shiftScaleX == null) ? 25 : pf(effects.shiftScaleX)) / 5 / 100;
            shiftScaleYFraction = ((effects.shiftScaleY == null) ? 25 : pf(effects.shiftScaleY)) / 5 / 100;
            effectEasing = (effects.easing || 'Linear.easeNone');
            effectOrigin = (effects.origin || 'center center');
            t = loopDuration / 20;
            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, t * 6, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t * 6, { scaleX: (1 + shiftScaleXFraction * 5), scaleY: (1 - shiftScaleYFraction * 5), transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t * 6;
                tm.to($p, t * 2, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t * 2, { scaleX: (1 - shiftScaleXFraction * 5), scaleY: (1 + shiftScaleYFraction * 5), transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t * 2;
                tm.to($p, t * 2, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t * 2, { scaleX: (1 + shiftScaleXFraction * 3), scaleY: (1 - shiftScaleYFraction * 3), transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t * 2;
                tm.to($p, t * 3, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t * 3, { scaleX: (1 - shiftScaleXFraction), scaleY: (1 + shiftScaleYFraction), transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t * 3;
                tm.to($p, t * 2, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t * 2, { scaleX: (1 + shiftScaleXFraction), scaleY: (1 - shiftScaleYFraction), transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t * 2;
                tm.to($p, t * 5, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t * 5, { scaleX: 1, scaleY: 1, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t * 5;
                offset += loopDuration + loopDelay;
            }
            break;
        case 'wobble':
            shiftRotationFraction = pi(((effects.shiftRotation == null) ? 8 : pf(effects.shiftRotation)) / 5);
            shiftHorizontalFraction = pi(((effects.shiftHorizontal == null) ? 45 : pf(effects.shiftHorizontal)) / 9);
            shiftVerticalFraction = pi(((effects.shiftVertical == null) ? 0 : pf(effects.shiftVertical)) / 9);
            effectEasing = (effects.easing || 'Linear.easeNone');
            effectOrigin = (effects.origin || 'bottom center');
            t = loopDuration / 6;

            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, t, { visibility: 'visible', x: '-=' + shiftHorizontalFraction * 5, y: '-=' + shiftVerticalFraction * 5, transformOrigin: 'top left' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '-=' + shiftRotationFraction * 5, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible', x: '+=' + shiftHorizontalFraction * 9, y: '+=' + shiftVerticalFraction * 8, transformOrigin: 'top left', ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '+=' + shiftRotationFraction * 8, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible', x: '-=' + shiftHorizontalFraction * 7, y: '-=' + shiftVerticalFraction * 6, transformOrigin: 'top left', ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '-=' + shiftRotationFraction * 6, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible', x: '+=' + shiftHorizontalFraction * 5, y: '+=' + shiftVerticalFraction * 5, transformOrigin: 'top left', ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '+=' + shiftRotationFraction * 5, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible', x: '-=' + shiftHorizontalFraction * 3, y: '-=' + shiftVerticalFraction * 3, transformOrigin: 'top left', ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '-=' + shiftRotationFraction * 3, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible', x: '+=' + shiftHorizontalFraction, y: '+=' + shiftVerticalFraction, transformOrigin: 'top left', ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '+=' + shiftRotationFraction, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                offset += loopDuration + loopDelay;
            }
            break;
        case 'swing':
            shiftRotationFraction = pi(((effects.shiftRotation == null) ? 25 : pf(effects.shiftRotation)) / 5);
            t = loopDuration / 5;
            effectEasing = (effects.easing || 'Linear.easeNone');
            effectOrigin = (effects.origin || 'top center');

            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '+=' + shiftRotationFraction * 3, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '-=' + shiftRotationFraction * 5, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '+=' + shiftRotationFraction * 3, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '-=' + shiftRotationFraction * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { rotation: '+=' + shiftRotationFraction, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                offset += loopDuration + loopDelay;
            }
            break;
        case 'tada':
            shiftScaleDown = 1 - ((effects.shiftScale == null) ? 10 : pf(effects.shiftScale)) / 100;
            shiftScaleUp = 1 + ((effects.shiftScale == null) ? 10 : pf(effects.shiftScale)) / 100;
            shiftRotation = (effects.shiftRotation == null) ? 6 : pf(effects.shiftRotation);
            t = loopDuration / 10;
            effectEasing = (effects.easing || 'Linear.easeNone');
            effectOrigin = (effects.origin || 'center center');

            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleDown, rotation: '-=' + shiftRotation, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleDown, rotation: '+=' + shiftRotation * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleUp, rotation: '-=' + shiftRotation * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleUp, rotation: '+=' + shiftRotation * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleUp, rotation: '-=' + shiftRotation * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleUp, rotation: '+=' + shiftRotation * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleUp, rotation: '-=' + shiftRotation * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleUp, rotation: '+=' + shiftRotation * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: shiftScaleUp, rotation: '-=' + shiftRotation * 2, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible'}, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, t, { scale: 1, rotation: '+=' + shiftRotation, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                offset += loopDuration + loopDelay;
            }
            break;
        case 'shake':
            shiftVertical = (effects.shiftVertical == null) ? 0 : pf(effects.shiftVertical);
            shiftHorizontal = (effects.shiftHorizontal == null) ? 20 : pf(effects.shiftHorizontal);
            halfShiftVertical = pi(shiftVertical / 2);
            halfShiftHorizontal = pi(shiftHorizontal / 2);
            t = loopDuration / 8;
            effectEasing = (effects.easing || 'Linear.easeNone');
            effectOrigin = (effects.origin || 'center center');

            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, t, { visibility: 'visible', x: '-=' + halfShiftHorizontal, y: '-=' + halfShiftVertical, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible', x: '+=' + shiftHorizontal, y: '+=' + shiftVertical, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible', x: '-=' + shiftHorizontal, y: '-=' + shiftVertical, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += t;
                tm.to($p, t, { visibility: 'visible', x: '+=' + halfShiftHorizontal, y: '+=' + halfShiftVertical, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                offset += loopDuration + loopDelay;
            }
            break;
        case 'bounce':
            shiftVertical = (effects.shiftVertical == null) ? pi(-item.boundingRect.height / 2) : pf(effects.shiftVertical);
            shiftHorizontal = (effects.shiftHorizontal == null) ? 0 : pf(effects.shiftHorizontal);
            upDuration = loopDuration * ((effects.upDownRatio == null) ? 10 : pf(effects.upDownRatio)) / 100;
            downDuration = loopDuration - upDuration;
            effectEasing = (effects.easing || 'Bounce.easeOut');
            effectOrigin = (effects.origin || 'center center');

            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, upDuration, { visibility: 'visible', y: '+=' + shiftVertical, x: '+=' + shiftHorizontal, ease: 'Power2.easeOut' }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += upDuration;
                tm.to($p, downDuration, { visibility: 'visible', y: '-=' + shiftVertical, x: '-=' + shiftHorizontal, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                offset += loopDuration + loopDelay;
            }
            break;
        case 'flash':
            upDuration = loopDuration * ((effects.upDownRatio == null) ? 50 : pf(effects.upDownRatio)) / 100;
            downDuration = loopDuration - upDuration;
            shiftOpacity = (effects.shiftOpacity == null) ? 0 : (pf(effects.shiftOpacity) / 100);
            effectEasing = (effects.easing || 'Linear.easeNone');
            effectOrigin = (effects.origin || 'center center');
            var originalOpacity = 1;

            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, upDuration, { visibility: 'visible', opacity: shiftOpacity, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));
                _shift += upDuration;
                tm.to($p, downDuration, { visibility: 'visible', opacity: originalOpacity, transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));

                offset += loopDuration + loopDelay;
            }
            break;
        case 'rotate360':
            direction = (effects.direction == null) ? 'cw' : effects.direction;
            effectEasing = (effects.easing || 'Linear.easeNone');
            effectOrigin = (effects.origin || 'center center');

            for (index = 0; index < repeat; ++index) {
                _shift = 0;
                tm.to($p, loopDuration, { visibility: 'visible' }, timelineStartLabel + '+=' + (offset + _shift));
                tm.to($item, loopDuration, { rotation: ((direction === 'cw') ? '+' : '-') + '=360', transformOrigin: effectOrigin, ease: effectEasing }, timelineStartLabel + '+=' + (offset + _shift));

                offset += loopDuration + loopDelay;
            }
            break;
    }


}

function getPropStateVal(m, par, state) {
    if (state !== undefined && m.hasOwnProperty(par) && m[par].hasOwnProperty(state)) {
        return m[par][state];
    }
    return m[par];
}

function setItemBoxShadow($item, itemModel, $parent, state) {
    var tmpState = state;
    if (itemModel.hasOwnProperty('h_on') && tmpState === undefined) {
        tmpState = 'n';
    }
    var val = '';
    if (getPropStateVal(itemModel, 'default_boxShadowGroup', tmpState)) {
        val = getPropStateVal(itemModel, 'default_boxShadowOffsetX', tmpState) + 'px ' +
            getPropStateVal(itemModel, 'default_boxShadowOffsetY', tmpState) + 'px ' +
            getPropStateVal(itemModel, 'default_boxShadowBlur', tmpState) + 'px ' +
            getPropStateVal(itemModel, 'default_boxShadowSpread', tmpState) + 'px ' +
            _rgbaFromColor(getPropStateVal(itemModel, 'default_boxShadowColor', tmpState),
                getPropStateVal(itemModel, 'default_boxShadowOpacity', tmpState) / 100);

    }
    $item.style.setProperty('-webkit-box-shadow', val);
    $item.style.setProperty('-moz-box-shadow', val);
    $item.style.setProperty('box-shadow', val);
}

function setItemBorder($item, itemModel, $parent, state) {
    var tmpState = state;
    if (itemModel.hasOwnProperty('h_on') && tmpState === undefined) {
        tmpState = 'n';
    }
    if (getPropStateVal(itemModel, 'default_borderGroup', tmpState)) {
        $item.style.border = getPropStateVal(itemModel, 'default_borderSize', tmpState) + 'px' +
            ' ' + getPropStateVal(itemModel, 'default_borderStyle', tmpState) +
            ' ' + _rgbaFromColor(getPropStateVal(itemModel, 'default_borderColor', tmpState), getPropStateVal(itemModel, 'default_borderOpacity', tmpState) * 0.01);
        $item.style.boxSizing = 'border-box';

        if (getPropStateVal(itemModel, 'default_borderRadius', tmpState) !== undefined) {
            $item.style.borderRadius = getPropStateVal(itemModel, 'default_borderRadius', tmpState) + 'px';
        }
    } else {
        $item.style.border = 'none';
    }
}

function setItemBackground($item, itemModel, state) {
    var tmpState = state;
    if (itemModel.hasOwnProperty('h_on') && tmpState === undefined) {
        tmpState = 'n';
    }
    if (getPropStateVal(itemModel, 'default_decorationGroup', tmpState) === true) {
        $item.style.background = getPropStateVal(itemModel, 'default_backgroundColor', tmpState);
    } else {
        $item.style.background = 'transparent';
    }
}

function setTextShadow($item, itemModel, $innerDiv, state) {
    var tmpState = state;
    if (itemModel.hasOwnProperty('h_on') && tmpState === undefined) {
        tmpState = 'n';
    }
    var val = '';
    if (getPropStateVal(itemModel, 'default_textDropShadowGroup', tmpState)) {
        var val = getPropStateVal(itemModel, 'default_shadowOffsetX', tmpState) + 'px ' +
            getPropStateVal(itemModel, 'default_shadowOffsetY', tmpState) + 'px ' +
            getPropStateVal(itemModel, 'default_shadowBlur', tmpState) + 'px ' +
            _rgbaFromColor(getPropStateVal(itemModel, 'default_shadowColor', tmpState),
                getPropStateVal(itemModel, 'default_shadowOpacity', tmpState) / 100);
    }
    $innerDiv.style.setProperty('text-shadow', val);
}

function setTextStyle($item, itemModel, state) {
    var tmpState = state;
    if (itemModel.hasOwnProperty('h_on') && tmpState === undefined) {
        tmpState = 'n';
    }

    var $innerDiv = $item.children[0];

    setItemBackground($item, itemModel, state);

    $item.style.color = getPropStateVal(itemModel, 'default_fontColor', tmpState);
    $innerDiv.style.fontSize = getPropStateVal(itemModel, 'default_fontSize', tmpState) + 'px';
    $innerDiv.style.fontFamily = itemModel.fontName + ', arial, sans-serif';
    $innerDiv.style.textAlign = getPropStateVal(itemModel, 'default_textAlign', tmpState);
    $innerDiv.style.whiteSpace = 'pre';

    if (getPropStateVal(itemModel, 'default_textUnderline', tmpState) === true) {
        $innerDiv.style.textDecoration = 'underline';
    } else {
        $innerDiv.style.textDecoration = 'none';
    }
    if (itemModel.fontWeight) {
        $innerDiv.style.fontWeight = itemModel.fontWeight;
    } else {
        $innerDiv.style.fontWeight = 'normal';
    }
    if (typeof itemModel.default_letterSpacing !== 'undefined') {
        var val = pi(itemModel.default_letterSpacing);
        if (val === 0) {
            $innerDiv.style.letterSpacing = 'normal';
        } else {
            $innerDiv.style.letterSpacing = val + 'px';
        }
    } else {
        $innerDiv.style.letterSpacing = 'normal';
    }
    if (getPropStateVal(itemModel, 'default_textItalic', tmpState) === true) {
        $innerDiv.style.fontStyle = 'italic';
    } else {
        $innerDiv.style.fontStyle = 'normal';
    }
    if (itemModel.default_textOpacity) {
        $innerDiv.style.opacity = pi(itemModel.default_textOpacity) / 100;
    } else {
        $innerDiv.style.opacity = 1;
    }
    if (getPropStateVal(itemModel, 'default_lineHeight', tmpState)) {
        $innerDiv.style.lineHeight = pi(getPropStateVal(itemModel, 'default_lineHeight', tmpState)) + 'px';
    } else {
        $innerDiv.style.lineHeight = 'normal';
    }

    if (itemModel.default_paddingTop > 0) {
        $innerDiv.style.marginTop = itemModel.default_paddingTop + 'px';
    }
    if (itemModel.default_paddingBottom > 0) {
        $innerDiv.style.marginBottom = itemModel.default_paddingBottom + 'px';
    }
    if (itemModel.default_paddingLeft > 0) {
        $innerDiv.style.marginLeft = itemModel.default_paddingLeft + 'px';
    }
    if (itemModel.default_paddingRight > 0) {
        $innerDiv.style.marginRight = itemModel.default_paddingRight + 'px';
    }

    setTextShadow($item, itemModel, $innerDiv, state);

    insertTextApplyAutosize(_scene, itemModel, $item, $innerDiv, state);

    var populateSkewValue = function (x, y) {
        return 'skew(' + (x || 0) + 'deg, ' + (y || 0) + 'deg)';
    };
    var val = populateSkewValue(pi(itemModel.textSkewX), pi(itemModel.textSkewY));
    $innerDiv.style.setProperty('transform', val);
    $innerDiv.style.setProperty('-webkit-transform', val);
    $innerDiv.style.setProperty('-ms-transform', val);
}

function setItemState($item,itemModel,$parent,st) {
    setItemBoxShadow($item, itemModel, $parent, st);
    setItemBorder($item, itemModel, $parent, st);
    setTextStyle($item, itemModel, st);
}

function _setOnDefaultState($banner, $item, itemModel, $parent) {
    var rotation = itemModel.rotation || 0;
    $item.style.height = itemModel.height + 'px';
    $item.style.width = itemModel.width + 'px';
    $parent.style.height = itemModel.height + 'px';
    $parent.style.width = itemModel.width + 'px';

    $item.style.transform = 'none';
    $parent.style.transform = 'translate('+itemModel.left + 'px' + ', '+itemModel.top +'px)';
    $parent.style.position = 'absolute';

    $parent.style.opacity = 1;

    if (rotation !== 0) {
        $parent.style.transformOrigin = '0 0';
        $parent.style.transform = 'translate('+itemModel.left + 'px' + ', '+itemModel.top +'px) rotate(' + rotation + 'deg)';
    }

    if (itemModel.zIndex) {
        $parent.style.zIndex = itemModel.zIndex;
    }

    setItemBorder($item, itemModel, $parent);
    setItemBoxShadow($item, itemModel, $parent);


    if (itemModel.default_interactionGroup && itemModel.default_hyperlinkValue) {
        $parent.style.pointerEvents = 'auto';
        $item.style.pointerEvents = 'none';
        resetItemHyperlink($parent, itemModel, itemModel.default_hyperlinkValue, itemModel.default_hyperlinkTarget);
    } else {
        $parent.style.cursor = 'default';
        if (itemModel.ignore_hyperlink !== true)
        {
            $parent.style.pointerEvents = 'none';
        }
    }

    if (itemModel['h_on'] === true) {
        $parent.style.pointerEvents = 'auto';
        $item.style.pointerEvents = 'none';
        $parent.style.cursor = 'pointer';
        addEventHandler($parent, 'mouseover', function (e) {
            setItemState($item, itemModel, $parent, 'h');
        });
        addEventHandler($parent, 'mouseout', function (e) {
            setItemState($item, itemModel, $parent, 'n');
        });
    }
    if (itemModel['d_on'] === true) {
        $parent.style.pointerEvents = 'auto';
        $item.style.pointerEvents = 'none';
        $parent.style.cursor = 'pointer';
        addEventHandler($parent, 'mousedown', function (e) {
            setItemState($item, itemModel, $parent, 'd');
        });
        addEventHandler($parent, 'mouseup', function (e) {
            setItemState($item, itemModel, $parent, 'h');
        });
    }

    if (itemModel.type === 'text' || itemModel.type === 'button') {
        if (feedLoop == -1) feedLoop = 0;
        setTextStyle($item, itemModel);
    } else if (itemModel.type === 'image') {
        if (!feed || !itemModel.feedTag) {
            $item.style.backgroundImage = generateImageUrl(itemModel);
        }

        if (itemModel.imageOpacity) {
            $item.style.opacity = pi(itemModel.imageOpacity) / 100;
        }

        if (itemModel.default_decorationGroup) {
            $item.style.backgroundRepeat = itemModel.default_imageRepeat;
            $item.style.backgroundSize = itemModel.default_imageSize;
            $item.style.backgroundPosition = itemModel.default_imagePosition.toLowerCase();
            $item.style.backgroundColor = itemModel.default_imageBgColor;
        } else {
            $item.style.backgroundRepeat = 'no-repeat';
            $item.style.backgroundSize = 'contain';
            $item.style.backgroundPosition = 'center';
            $item.style.backgroundColor = 'transparent';
        }
    } else if (itemModel.type === 'rect') {
        if (itemModel.default_decorationGroup) {
            $item.style.background = itemModel.default_backgroundColor;
        }
    } else if (itemModel.type === 'video') {
        var $video = $item.children[0];

        $video.setAttribute('width', '100%');
        $video.setAttribute('height', '100%');
        $video.setAttribute('playsinline', true);
        $video.setAttribute('controlsList', 'nodownload');
        $video.poster = itemModel.videoFallback;

        if (itemModel.video_controls) {
            $video.controls = true;
            $video.parentNode.style.pointerEvents = 'auto';
        }
        if (itemModel.video_muted) {
            $video.muted = true;
        }

        $video.autoplay = false;

        if (itemModel.video_loop) {
            $video.loop = true;
        }

        if (!isBnPeak && itemModel.videoSources && itemModel.videoSources.length) {
            itemModel.videoSources.forEach(function (source) {
                var $o = document.createElement('source');
                $o.src = generateVideoSource(itemModel, source.url);
                $o.type = source.type;
                $video.appendChild($o);
                addEventHandler($video, 'timeupdate', onVideoTimeUpdate);
            });
        }
    } else if (itemModel.type === 'widget') {
        $item.style.visibility = '';
    }
}

function generateVideoSource(itemModel, url) {
    var ret = url, s = 0, e = 0;

    if (itemModel.default_playbackGroup) {
        s = itemModel.default_videoStartAt;
        e = itemModel.default_videoEndAt;
        ret += '#t=' + s + ',' + e;
    }

    return ret;
}

function _setUpCustomEffect(timeline, item, customEffects, position) {
    item.width = pi(item.width);
    item.height = pi(item.height);
    item.left = pf(item.left);
    item.top = pf(item.top);
    item.rotation = pf(item.rotation);
    customEffects.left = pf(customEffects.left);
    customEffects.top = pf(customEffects.top);
    _scene.width = pi(_scene.width);
    _scene.height = pi(_scene.height);
    var currentLeft = item.left, // current Left position
        currentTop = item.top, // current Top position
        rotationDirection = ('appear' === customEffects.type)?1:-1,
        customLeft = boffset(customEffects.positionType, item.width, item.height, item.rotation, (customEffects.rotation - item.rotation) * rotationDirection, customEffects.scale / 100, customEffects.origin).x,
        customTop = boffset(customEffects.positionType, item.width, item.height, item.rotation, (customEffects.rotation - item.rotation) * rotationDirection, customEffects.scale / 100, customEffects.origin).y,
        animationParams = {},
        $item = document.getElementById(item.id),
        $parent = $item.parentNode;

    switch (customEffects.positionType) {
        case 'pixels':
            customLeft = currentLeft + customEffects.left;
            customTop = currentTop + customEffects.top;
            break;
        case 'left':
            customTop = currentTop;
            break;
        case 'right':
            customLeft = customLeft + _scene.width;
            customTop = currentTop;
            break;
        case 'top':
            customLeft = currentLeft;
            break;
        case 'bottom':
            customLeft = currentLeft;
            customTop = customTop + _scene.height;
            break;
        case 'top left':
            break;
        case 'top right':
            customLeft = customLeft + _scene.width;
            break;
        case 'bottom left':
            customTop = customTop + _scene.height;
            break;
        case 'bottom right':
            customLeft = customLeft + _scene.width;
            customTop = customTop + _scene.height;
            break;
        case 'absolute':
            customLeft = customEffects.left;
            customTop = customEffects.top;
            break;
    }

    if ('appear' === customEffects.type) {
        var start = {}, end = {};

        start = {
            opacity: pi(customEffects.opacity) / 100,
            x: customLeft,
            y: customTop
        };
        end = {
            ease: customEffects.easing,
            opacity: 1,
            x: currentLeft,
            y: currentTop
        };

        if (item.type === 'widget') {
            end.onStart = widgetTransitionStart;
            end.onStartParams = [item];
        }
        if (item.type === 'video') {
            end.onStart = videoOnStart;
            end.onStartParams = [item];
        }

        timeline.fromTo($parent, pf(item.transitions[0].duration), start, end, position);
        timeline.fromTo($item, pf(item.transitions[0].duration),
            {
                scale: customEffects.scale / 100,
                rotation: customEffects.rotation-item.rotation,
                transformOrigin: customEffects.origin
            },
            {
                scale: 1,
                rotation: 0, // item.rotation,
                transformOrigin: customEffects.origin,
                ease: customEffects.easing
            },
            position);
    } else if ('disappear' === customEffects.type) {
        var start = {
            opacity: 1,
            x: currentLeft,
            y: currentTop
        };

        animationParams = {
            opacity: pi(customEffects.opacity) / 100,
            x: customLeft,
            y: customTop,
            ease: customEffects.easing,
            immediateRender: false,
        };

        if (item.type === 'widget') {
            animationParams.onComplete = widgetTransitionComplete;
            animationParams.onCompleteParams = [item];
        }
        if (item.type === 'video') {
            animationParams.onComplete = videoOnComplete;
            animationParams.onCompleteParams = [item];
        }

        timeline.fromTo($parent, pf(item.transitions[2].duration), start, animationParams, position);

        timeline.fromTo($item, pf(item.transitions[2].duration),
            {
                scale: 1,
                rotation: 0, // item.rotation,
                ease: customEffects.easing
            },
            {
                scale: customEffects.scale / 100,
                rotation: customEffects.rotation - item.rotation,
                transformOrigin: customEffects.origin,
                immediateRender: false,
            },
            position);
    }
}

function _rgbaFromColor(color, alpha) {
    if (!color || (typeof alpha === 'undefined') || (typeof alpha !== 'number')) {
        return 'rgba(0, 0, 0, 0)';
    }
    if (color === 'transparent') {
        return 'rgba(0, 0, 0, 0)';
    }
    if (color.substring(0, 4) === 'rgba') {
        // RGBA format. need to turn it back into HEX
        var temp = color.substring(5, color.length - 1);
        var vals = temp.split(','); // vals[ 0] - R, vals[ 1] - G, vals[2] - B
        color = '#' + _componentToHex(pi(vals[0])) +
            _componentToHex(pi(vals[1])) +
            _componentToHex(pi(vals[2]));
    }
    if (color.charAt(0) === '#') {
        // HEX Format
        var h = color.substring(1, 7); //  removing # from hex color
        var ret = 'rgba(';

        ret += parseInt(h.substring(0, 2), 16) + ','; // R
        ret += parseInt(h.substring(2, 4), 16) + ','; // G
        ret += parseInt(h.substring(4, 6), 16) + ','; // B
        ret += alpha + ')'; // A

        return ret;
    }
}

function _componentToHex(c) {
    var hex = c.toString(16);
    return hex.length == 1 ? '0' + hex : hex;
}

function gotoItemHyperlink(url, target, opts) {
    var gotoUrl = url || '',
        gotoTarget = target || '_blank',
        urls = gotoUrl.split(';'),
        params = bnTagParams,
        urlTag = params.bnTag || '',
        schTag = params.schedule_id ? '&schedule_id=' + params.schedule_id : '',
        plhTag = params.placeholder_id ? '&placeholder_id=' + params.placeholder_id : '',
        isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

    if (urls.length > 1) {
        if (isMobile && urls[1] !== '') {
            gotoUrl = urls[1];
        } else {
            gotoUrl = urls[0];
        }
    }

    gotoUrl = addParamToURL(gotoUrl, params.wm, 'wm');
    gotoUrl = addParamToURL(gotoUrl, params.zoneid, 'zoneid');
    gotoUrl = addParamToURL(gotoUrl, params.tdpeh, 'tdpeh');

    var finalUrl = urlTag;
    if (finalUrl.substr(finalUrl.length - 1) === '=') {
        finalUrl = encodeURIComponent(finalUrl+encodeURIComponent(gotoUrl));
    } else if (finalUrl.substr(finalUrl.length - 3).toLowerCase() === '%3d') {
        finalUrl = finalUrl+encodeURIComponent(encodeURIComponent(gotoUrl));
    } else if (finalUrl.substr(finalUrl.length - 5).toLowerCase() === '%253d') {
        finalUrl = finalUrl+encodeURIComponent(encodeURIComponent(encodeURIComponent(gotoUrl)));
    } else if (finalUrl === '') {
        finalUrl = encodeURIComponent(gotoUrl);
    }

    finalUrl = click_analytics_url +
        '&x=' + opts.x +
        '&y=' + opts.y +
        '&domain=' + (params.domain || getHostname(document.referrer || '')) +
        plhTag +
        schTag +
        '&url=' + finalUrl;

    if (!click_analytics_url) {
        finalUrl = gotoUrl;
    }

    if (_scene.exit_stop_video) stopAllVideos();
    if (_scene.exit_jump_frame) exitJumpFrame();
    if (gotoUrl.indexOf('window.') === 0) {
        finalUrl = eval(gotoUrl);
    } else if (window.clickTag !== '' && opts.glob) {
        window.open(window.clickTag, gotoTarget);
        return;
    }

    // click_analytics_url - is injected from backend
    window.open(finalUrl, gotoTarget);

    if (params.clickservice) {
        var p = new Image(1, 1);
        p.src = decodeURIComponent(params.clickservice);
    }
}

function addParamToURL(url, param, pname) {
    if (param == null) { return url; }
    var _url = url;
    _url += (_url.split('?')[1] ? '&' : '?') + pname + '=' + param;
    return _url;
}

function getBnTagParam() {
    var urlStr = window.location.hash || window.location.search;
    var qs = (function (a) {
        if (a == '') return {};
        var b = {};
        for (var i = 0; i < a.length; ++i) {
            var p = a[i].split('=', 2);
            if (p.length == 1)
                b[p[0]] = '';
            else
                b[p[0]] = p[1];
        }
        return b;
    })(urlStr.substr(1).split('&'));

    return qs;
}

function getHostname(url) {
    var h;

    if (url.indexOf('://') > -1) {
        h = url.split('/')[2];
    } else {
        h = url.split('/')[0];
    }
    h = h.split(':')[0];
    h = h.split('?')[0];

    return h;
}

function refreshItemsFromFeed() {
    config.forEach(function (item) {
        updateFeedItem(item);
        updateFeedUrl(item);
    });
}

function feedEnabled(itemModel) {
    return feedData && typeof itemModel.feedTag !== 'undefined' && itemModel.feedTag !== '';
}

function urlFeedEnabled(itemModel) {
    return feedData && typeof itemModel.urlTag !== 'undefined' && itemModel.urlTag !== '';
}

function updateFeedItem(itemModel) {
    var $item = document.getElementById(itemModel.id);

    if (~['text', 'image', 'button'].indexOf(itemModel.type)) {
        if (itemModel.visibilityMode === 'nofeed') {
            $item.style.display = 'none';
        }
        if (feed && !(feedData.feed || []).length) {
            if (itemModel.visibilityMode === 'feed') {
                $item.style.display = 'none';
            }
            if (itemModel.visibilityMode === 'nofeed') {
                $item.style.display = '';
            }
        }
    }

    if (feedEnabled(itemModel) && (feedData.feed || []).length) {
        var sp = itemModel.feedStartPosition,
            fp = itemModel.feedFixedPosition,
            jp = itemModel.feedStep,
            isFp = typeof fp !== 'undefined' && fp !== '',
            indexes = calcFeedIndexes(isFp, fp, sp, jp, feedData.feed.length, feedLoop),
            index = indexes.index, nextIndex = indexes.nextIndex,
            value = '', nextVal = '', ind;

        try {
            value = feedData.feed[index][itemModel.feedTag];

            if (itemModel.type === 'text' || itemModel.type === 'button') {
                itemModel.value = value;
                timeline.kill(null, $item);
                timeline.kill(null, $item.parentNode);
                _setupItem(itemModel, $banner, timeline);
            } else if (itemModel.type === 'image') {
                updateImage(itemModel, $item, value);
                nextVal = feedData.feed[nextIndex][itemModel.feedTag];
                if (nextIndex !== index && nextVal !== value) {
                    updateImage(itemModel, $item, nextVal, true);
                }
            }
        } catch (err) {
            console.log('unable to update Feed Item', itemModel.id);
        }
    }
}

function calcFeedIndexes(isFp, fp, sp, jp, len, feedLoop) {
    var index, nextIndex, count, ind;

    if (isFp) {
        index = pi(fp);
        nextIndex = index;
    } else {
        sp = pi(sp) || 0;
        jp = pi(jp) || 1;
        count = Math.ceil((len - sp) / jp);
        ind = feedLoop % count;

        if (!ind) {
            index = sp;
            nextIndex = sp + (ind + 1) * jp;
            if (nextIndex >= len) {
                nextIndex = index;
            }
        } else {
            index = sp + ind * jp;

            if (sp + (ind + 1) * jp < len) {
                nextIndex = sp + (ind + 1) * jp;
            } else {
                nextIndex = sp;
            }
        }
    }

    return { index: index, nextIndex: nextIndex };
}

function updateFeedUrl(itemModel) {
    if (!urlFeedEnabled(itemModel)) {
        return;
    }

    var $item = (itemModel.type === 'scene') ? document.body : document.getElementById(itemModel.id).parentNode,
        fp = itemModel.urlFixedPosition,
        sp = itemModel.urlStartPosition,
        tg = (itemModel.type === 'scene') ? itemModel.global_hyperlinkTarget : itemModel.default_hyperlinkTarget,
        jp = itemModel.urlStepSize,
        isFp = typeof fp !== 'undefined' && fp !== '',
        indexes = calcFeedIndexes(isFp, fp, sp, jp, feedData.feed.length, feedLoop),
        nextPosition = indexes.index,
        value = '';

    try {
        value = feedData.feed[nextPosition][itemModel.urlTag];
        resetItemHyperlink($item, itemModel, value, tg);
    } catch (err) {
        console.log('unable to update Feed Item ', itemModel.id);
    }
}

function resetItemHyperlink($item, itemModel, url, target) {
    if (!url) {
        url = itemModel.default_hyperlinkValue;
    }
    if (!target) {
        target = '_blank';
    }
    if (target === '_self' && !!window.top) {
        target = '_top';
    }

    if (typeof itemIdsToHyperlinkHandlers[itemModel.id] !== 'undefined' &&
        itemIdsToHyperlinkHandlers[itemModel.id] !== null) {
        removeEventHandler($item, 'click', itemIdsToHyperlinkHandlers[itemModel.id]);
    }

    itemIdsToHyperlinkHandlers[itemModel.id] = function (e) {
        e.stopPropagation();
        gotoItemHyperlink(
            url,
            target,
            { x: pi(e.pageX || e.clientX), y: pi(e.pageY || e.clientY), glob: true }
        );
    };

    addEventHandler($item, 'click', itemIdsToHyperlinkHandlers[itemModel.id]);

    $item.style.cursor = 'pointer';
}

function generateImageUrl(itemModel) {
    return 'url(\'' + getOptimizedImageUrl(itemModel) + '\')';
}

function getOptimizedImageUrl(itemModel, s) {
    var src = s || itemModel.imageSrc,
        u = '&u=' + encodeURIComponent(src),
        m = '&m=contain',
        w = '&w=' + pi(itemModel.width),
        h = '&h=' + pi(itemModel.height),
        x = '',
        y = '',
        q = '&q='+(_scene.compression_level?(100-_scene.compression_level):100),
        r = _scene.retina?'&retina':'';

    if (!thumbnailer_url || !_scene.compress || src.substring(src.length - 4) === '.svg') {
        return src;
    }

    if (itemModel.default_decorationGroup) {
        m = '&m=' + itemModel.default_imageSize.replace('%', '');
        var pos = itemModel.default_imagePosition.split(' ');
        if (['Left','Right'].indexOf(pos[1])>=0) pos.push(pos.shift());
        x = '&x=' + pos[0];
        y = '&y=' + (pos[1] || 'center');
    }

    return thumbnailer_url + ('?' + m + w + h + x + y + q + r).toLowerCase() + u;
}

function updateImage(itemModel, $item, value, isFollowing, ignoreFeed) {
    var metadata = {
        imageSrc: value,
        default_imagePosition: itemModel.default_imagePosition,
        default_decorationGroup: itemModel.default_decorationGroup,
        default_imageSize: itemModel.default_imageSize,
        feedMode: itemModel.feedMode,
        width: itemModel.width,
        height: itemModel.height
    };

    if (feedImageCache[value]) {
        if (!isFollowing) {
            displayImage(metadata, $item, feedImageCache[value].w, feedImageCache[value].h);
        }
    } else {
        if (!isFollowing) {
            $item.style.display = 'none';
        }
        var img = new Image(),
            currentFeedLoop = feedLoop;

        img.onload = function (image) {
            var _w = image.width || this.width || itemModel.width,
                _h = image.height || this.height || itemModel.height;

            feedImageCache[value] = { w: _w, h: _h };
            if (ignoreFeed || (currentFeedLoop === feedLoop && !isFollowing)) {
                displayImage(metadata, $item, _w._h);
            }
        };
        img.onerror = function () {
            console.log('image loading falied');
        };
        img.src = getOptimizedImageUrl(metadata,value);
    }
}

function displayImage(metadata, $image, w, h) {
    if (metadata.feedMode === 'fixed') {
        $image.style.width = w + 'px';
        $image.style.height = h + 'px';
    }
    $image.style.backgroundImage = generateImageUrl(metadata);
    $image.style.backgroundSize = 'contain';
    $image.style.display = '';
}

function insertTextApplyAutosize(stageItem, itemModel, $outerDiv, $innerDiv, state) {
    var tmpState = state;
    if (itemModel.hasOwnProperty('h_on') && tmpState === undefined) {
        tmpState = 'n';
    }
    var formattedTextInput = String(itemModel.value).replace(/\r\n|\r|\n/g, '<br/>'),
        padLeft = pi(itemModel.default_paddingLeft),
        padRight = pi(itemModel.default_paddingRight),
        padTop = pi(itemModel.default_paddingTop),
        padBottom = pi(itemModel.default_paddingBottom),
        borderSize = getPropStateVal(itemModel, 'default_borderGroup', tmpState) ? pi(getPropStateVal(itemModel, 'default_borderSize', tmpState)) : 0;

    $innerDiv.style.width =
        (pi(itemModel.width) -
            (padLeft + borderSize) -
            (padRight + borderSize)) + 'px';
    $innerDiv.style.height =
        (pi(itemModel.height) -
            (padTop + borderSize) -
            (padBottom + borderSize)) + 'px';

    //Because we have outer and inner boxes we can use margin for inner box and decrease it's height to fit the text
    $innerDiv.style.marginLeft = padLeft + 'px';
    $innerDiv.style.marginRight = padRight + 'px';
    $innerDiv.style.marginTop = padTop + 'px';
    $innerDiv.style.marginBottom = padBottom + 'px';

    //line height set as ratio. !don't use "%" symbol in css!
    $innerDiv.style.lineHeight = getPropStateVal(itemModel, 'default_lineHeight', tmpState) / getPropStateVal(itemModel, 'default_fontSize', tmpState);

    $innerDiv.style.setProperty('image-rendering', 'optimizeQuality');
    $innerDiv.style.setProperty('user-select', 'none');
    $innerDiv.style.setProperty('-webkit-font-smoothing', 'antialiased');
    $innerDiv.style.setProperty('-moz-osx-font-smoothing', 'grayscale');

    switch (itemModel.textStyle) {
        case 'dynamic_all':
            insertTextDynamicWidthDynamicHeight(stageItem, itemModel, $outerDiv, $innerDiv, formattedTextInput, tmpState);
            break;
        case 'fixed_width_dynamic_height':
            insertTextFixedWidthDynamicHeight(stageItem, itemModel, $outerDiv, $innerDiv, formattedTextInput, tmpState);
            break;
        default:
            insertTextFixedWidthFixedHeight(stageItem, itemModel, $outerDiv, $innerDiv, formattedTextInput, tmpState);
            break;
    }
}

function insertTextFixedWidthFixedHeight(stageItem, itemModel, $outterDiv, $innerDiv, formattedTextInput, state) {
    $innerDiv.style.whiteSpace = 'normal';
    $innerDiv.innerHTML = formattedTextInput;
    //html_nbsp_node($innerDiv);
    bnTextAutosize($innerDiv, {
        maxFontSize: getPropStateVal(itemModel, 'default_fontSize', state),
        reProcess: true,
        alignVert: itemModel.verticalAlign,
        alignBottomVert: itemModel.verticalBottomAlign,
        multiLine: true
    });
}

function insertTextDynamicWidthDynamicHeight(stageItem, itemModel, $outerDiv, $innerDiv, formattedTextInput, state) {
    var oldTextWidth = itemModel.origWidth || itemModel.width,
        _x = itemModel.origLeft || itemModel.left,
        _w, _h, rotation = itemModel.rotation || 0,
        borderSize = getPropStateVal(itemModel,'default_borderGroup',state) ? parseInt(getPropStateVal(itemModel,'default_borderSize',state)) : 0;

    $innerDiv.style.whiteSpace = 'nowrap';
    $innerDiv.innerHTML = '<span style="display: inline-block;">' + formattedTextInput + '</span>';

    var newTextWidth = Math.ceil($innerDiv.firstChild.getBoundingClientRect().width);
    var newTextHeight = Math.ceil($innerDiv.firstChild.getBoundingClientRect().height);

    if (itemModel.rotation != 0) {
        newTextWidth = parseInt($innerDiv.firstChild.offsetWidth);
        newTextHeight = parseInt($innerDiv.firstChild.offsetHeight);
    }

    _w = newTextWidth + itemModel.default_paddingLeft + itemModel.default_paddingRight + borderSize*2;
    $outerDiv.style.width = _w + 'px';
    $innerDiv.style.width = newTextWidth + 'px';

    _h = newTextHeight + itemModel.default_paddingTop + itemModel.default_paddingBottom + borderSize*2;
    $outerDiv.style.height = _h + 'px';
    $innerDiv.style.height = newTextHeight + 'px';


    if (rotation === 0 && getPropStateVal(itemModel, 'default_textAlign', state) === 'right') {
        _x = parseInt(_x - (_w - oldTextWidth));
    } else if (rotation === 0 && getPropStateVal(itemModel, 'default_textAlign', state) === 'center') {
        _x = parseInt(_x - (_w - oldTextWidth) / 2);
    }
    if (!itemModel.hasOwnProperty('origLeft')) {
        itemModel.origLeft = itemModel.left;
        itemModel.origWidth = itemModel.width;
        itemModel.origHeight = itemModel.height;
    }
    itemModel.width = _w;
    itemModel.height = _h;
    itemModel.left = _x;

    var $parent = document.getElementById(itemModel.id).parentNode;

    $parent.transform = 'translate('+itemModel.left + 'px' + ', '+itemModel.top +'px)';
    if (rotation !== 0) {
        $parent.style.transformOrigin = '0 0';
        $parent.style.transform = 'translate('+itemModel.left + 'px' + ', '+itemModel.top +'px) rotate(' + rotation + 'deg)';
    }
}

function insertTextFixedWidthDynamicHeight(stageItem, itemModel, $outerDiv, $innerDiv, formattedTextInput, state) {
    var _h,
        borderSize = getPropStateVal(itemModel,'default_borderGroup',state) ? parseInt(getPropStateVal(itemModel,'default_borderSize',state)) : 0;

    $innerDiv.style.whiteSpace = 'normal';
    $innerDiv.innerHTML = formattedTextInput;

    bnTextAutosize($innerDiv, {
        maxFontSize: getPropStateVal(itemModel, 'default_fontSize', state),
        minFontSize: 1,
        reProcess: true,
        alignVert: itemModel.verticalAlign,
        alignBottomVert: itemModel.verticalBottomAlign,
        multiLine: true,
        widthOnly: true
    });

    var textFittedSpanHeight = Math.ceil(pf($innerDiv.children[0].getBoundingClientRect().height));
    if (itemModel.rotation != 0) {
        textFittedSpanHeight = pi($innerDiv.children[0].offsetHeight);
    }

    _h = textFittedSpanHeight + pi(itemModel.default_paddingTop) + pi(itemModel.default_paddingBottom) + borderSize*2;

    itemModel.height = _h;
    $outerDiv.style.height = _h + 'px';
    $innerDiv.style.height = textFittedSpanHeight + 'px';
}

function stopAllVideos() {
    videos.forEach(function (i) {
        i.video_autoplay = false;
        try { document.getElementById(i.id).children[0].pause(); } catch(e) {}
    });
}

function exitJumpFrame() {
    try {
        var i = getBannerInfo();
        var f = frames_from_config(i.duration_msec).fallback_frames;
        jumpToMillisecondAndStop(f[f.length-1] || i.duration_msec/2);
    } catch(e) {}
}

// ======== API ========

function jumpToMillisecond(v) {
    var s = (v / 1000).toFixed(4);
    timeline.seek(s);
    console.log(v + ' jump completed'); // DO NOT REMOVE
}

function jumpToMillisecondAndStop(v) {
    timeline.pause();
    jumpToMillisecond(v);
}

function playFromMillisecond(v) {
    jumpToMillisecond(v);
    timeline.play();
}

function translateItem(item) {
    var model = {
            feedMode: 'autowidth'
        },
        $item, itemModel = {}, stage;

    config.forEach(function (i) {
        if (item.id === i.id) {
            itemModel = i;
            itemModel.value = item.value;
        } else if (i.type === 'scene') {
            stage = i;
        }
    });

    $item = document.getElementById(item.id);
    switch (itemModel.type) {
        case 'text':
        case 'button':
            timeline.kill(null, $item);
            timeline.kill(null, $item.parentNode);
            _setupItem(itemModel, $banner, timeline);
            break;
        case 'image':
            model.width = itemModel.width;
            model.height = itemModel.height;
            model.default_decorationGroup = itemModel.default_decorationGroup;
            model.default_imageSize = itemModel.default_imageSize;
            model.default_imagePosition = itemModel.default_imagePosition;
            updateImage(model, $item, item.value, false, true);
            break;
        case 'video':
        //updateVideo(model, $item, item.value);
    }
}

function getBannerInfo() {
    var duration_msec = timeline.duration() * 1000;
    if (duration_msec <= 0) {
        throw new Error('duration_msec should be greater than 0');
    }
    var frames = frames_from_config(duration_msec);
    var glob_params = get_global_params_from_conf();
    return {
        thumbnail_frame: frames.thumbnail_frame,
        fallback_frames: (_scene.fallback || _scene.fallback_png || _scene.mp4) ? frames.fallback_frames : [],
        w: glob_params.w,
        h: glob_params.h,
        mp4: glob_params.mp4,
        loop: glob_params.loop,
        duration_msec: (pre_ad_widget) ? (duration_msec + pre_ad_duration * 1000) : duration_msec
    };
}

function get_global_params_from_conf() {
    var ret = {};
    config.forEach(function (i) {
        if (i.type == 'scene') {
            ret = {
                w: pi(i.width),
                h: pi(i.height),
                loop: i.loop,
                mp4: !!i.mp4
            };
        }
    });
    return ret;
}

function frames_from_config(duration_msec) {
    function inside(v) {
        return v >= 0 || v < duration_msec;
    }
    function fcmp(a, b) {
        return a - b;
    }

    var ret = {};
    config.forEach(function (i) {
        if (i.type == 'scene') {
            var fallback_frames, thumbnail_frame;

            if (!Array.isArray(i.fallbacks) || i.fallbacks.length == 0) {
                fallback_frames = [duration_msec / 2];
                thumbnail_frame = duration_msec / 2;

                if (pre_ad_widget) {
                    thumbnail_frame = duration_msec / 2 + pre_ad_duration * 1000;
                    fallback_frames = [0, duration_msec / 2 + pre_ad_duration * 1000];
                }
            }
            else {
                fallback_frames = i.fallbacks.map(function (v) { return pf(v) * 1000; });
                fallback_frames = fallback_frames.filter(inside).sort(fcmp);
                thumbnail_frame = pf(fallback_frames[0]);
                if (pre_ad_widget) {
                    thumbnail_frame += pre_ad_duration * 1000;
                    fallback_frames = fallback_frames.map(function (v) { return pf(v) + pre_ad_duration * 1000; });
                    fallback_frames.unshift(0);
                }
            }

            ret = {
                thumbnail_frame: thumbnail_frame,
                fallback_frames: fallback_frames,
            };
        }
    });
    return ret;
}

function peek_obj() {
    return {
        banner_info: function (callback) {
            var ret = window.getBannerInfo();
            callback(null, ret);
        },
        jump: function (ms, callback) {
            window.bnAnimation.gotoAndStop(ms / 1000);
            // Call the callback when canvas is ready for screenshot
            setTimeout(function () { callback(null); }, 0);
        }
    };
}

function bannernow_api(version, callback) {
    if (version != 1) {
        callback(new Error('Invalid version'));
        return;
    }
    if (staticAssetsLoaded) {
        callback(null, window.peek_obj());
    }
    window.peekCallback = callback;
}

if (!isBnPeak) {
    var analytics_params = bnTagParams;

    if (analytics_pixel != '') {

        analytics_pixel += analytics_params['domain'] || getHostname(document.referrer || '');

        if (analytics_params['schedule_id']) {
            analytics_pixel += '&schedule_id=' + analytics_params['schedule_id'];
        }
        if (analytics_params['placeholder_id']) {
            analytics_pixel += '&placeholder_id=' + analytics_params['placeholder_id'];
        }

        var ie9 = (isIE() == 9) ? true : false;

        if (window.XMLHttpRequest && !ie9) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', analytics_pixel, true);
            xhr.send();
        }
        else {
            var analytics_img = new Image(1, 1);
            analytics_img.src = analytics_pixel;
        }
    }
}